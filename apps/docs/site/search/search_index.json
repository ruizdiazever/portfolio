{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"heroku/","text":"Django web app deploy to Heroku Documentacion para el deployment de una web app de Django previamente dockerizada para la plataforma Heroku con el metodo Container Registry de la misma. Primeros pasos Registrarse en Heroku Crear app en el Dasboard Preparacion del proyecto En nuestro proyecto creamos los siguientes 3 archivos y a\u00f1adimos a las mismas: Procfile , no lleva extension, agregamos la siguiente linea. web: gunicorn docker_django_heroku.wsgi \u2014 log-file - runtime.txt , agregamos la versi\u00f3n de Python que deseamos para nuestro proyecto. python-3.9.1 requirements.txt , agregamos las librerias pip necesarias. dj_database_url gunicorn django-heroku Editamos nuestro Dockerfile y agregamos lo siguiente al final CMD python manage.py runserver 0.0.0.0:$PORT La estructura de nuestro proyecto deberia ser algo parecido a esto: \ud83d\udce6webapp \u2523 \ud83d\udcc2webapp \u2523 \ud83d\udcc2core \u2523 \ud83d\udcdcdocker-compose.yml \u2523 \ud83d\udcdcDockerfile \u2523 \ud83d\udcdcmanage.py \u2523 \ud83d\udcdcProcfile \u2523 \ud83d\udcdcrequirements.txt \u2517 \ud83d\udcdcruntime.txt Docker Construimos nuestra imagen docker y la levantamos: $ sudo docker-compose -f docker-compose.yml build # BUILD $ sudo docker-compose -f docker-compose.yml up -d # UP $ sudo docker ps ls # CHECKING Deploy En nuestro Dasboard vamos a la seccion \"Deploy\" y hacemos click sobre el metodo \"Container Registry\", instalamos \"Heroku CLI\". Una vez hecho esto volvemos a nuestro proyecto y con el bash en el proyecto procedemos con los siguientes comandos: $ heroku login $ docker ps $ heroku container:login $ heroku container:push web --app \"<nameapp>\" $ heroku container:release web --app \"<nameapp>\" # Nota: la \"nameapp\" debe ser la misma que la app creada en Heroku. # Nota: el comando \"docker ps\" es para ver que los contenedores esten activos. Si todo hubiera marchado bien ahora deberiamos tener nuestra web activa, comprobar la misma con el boton \"Open app\" en el Dashboard de Heroku.","title":"Heroku Deployment"},{"location":"heroku/#django-web-app-deploy-to-heroku","text":"Documentacion para el deployment de una web app de Django previamente dockerizada para la plataforma Heroku con el metodo Container Registry de la misma.","title":"Django web app deploy to Heroku"},{"location":"heroku/#primeros-pasos","text":"Registrarse en Heroku Crear app en el Dasboard","title":"Primeros pasos"},{"location":"heroku/#preparacion-del-proyecto","text":"En nuestro proyecto creamos los siguientes 3 archivos y a\u00f1adimos a las mismas: Procfile , no lleva extension, agregamos la siguiente linea. web: gunicorn docker_django_heroku.wsgi \u2014 log-file - runtime.txt , agregamos la versi\u00f3n de Python que deseamos para nuestro proyecto. python-3.9.1 requirements.txt , agregamos las librerias pip necesarias. dj_database_url gunicorn django-heroku Editamos nuestro Dockerfile y agregamos lo siguiente al final CMD python manage.py runserver 0.0.0.0:$PORT La estructura de nuestro proyecto deberia ser algo parecido a esto: \ud83d\udce6webapp \u2523 \ud83d\udcc2webapp \u2523 \ud83d\udcc2core \u2523 \ud83d\udcdcdocker-compose.yml \u2523 \ud83d\udcdcDockerfile \u2523 \ud83d\udcdcmanage.py \u2523 \ud83d\udcdcProcfile \u2523 \ud83d\udcdcrequirements.txt \u2517 \ud83d\udcdcruntime.txt","title":"Preparacion del proyecto"},{"location":"heroku/#docker","text":"Construimos nuestra imagen docker y la levantamos: $ sudo docker-compose -f docker-compose.yml build # BUILD $ sudo docker-compose -f docker-compose.yml up -d # UP $ sudo docker ps ls # CHECKING","title":"Docker"},{"location":"heroku/#deploy","text":"En nuestro Dasboard vamos a la seccion \"Deploy\" y hacemos click sobre el metodo \"Container Registry\", instalamos \"Heroku CLI\". Una vez hecho esto volvemos a nuestro proyecto y con el bash en el proyecto procedemos con los siguientes comandos: $ heroku login $ docker ps $ heroku container:login $ heroku container:push web --app \"<nameapp>\" $ heroku container:release web --app \"<nameapp>\" # Nota: la \"nameapp\" debe ser la misma que la app creada en Heroku. # Nota: el comando \"docker ps\" es para ver que los contenedores esten activos. Si todo hubiera marchado bien ahora deberiamos tener nuestra web activa, comprobar la misma con el boton \"Open app\" en el Dashboard de Heroku.","title":"Deploy"}]}